apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'


def readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        print ignore
    } finally {
        if (stream != null) stream.close()
    }

    //safety defaults in case file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['minor']) version['minor'] = "0"
    if (!version['build']) version['build'] = "0"
    return version
}

def readVersionName() {
    def version = readVersion()
    return "${version['major']}.${version['minor']}.${version['build']}"
}

def readBuildCode() {
    def version = readVersion()
    def build = version['build'] as int
    return build
}

def incrementBuildNumber() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()

    def build = version['build'] as int
    build++
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        println "store started"
        version.store(stream, null)
        println "store successful"
    } finally {
        stream.close()
    }

    print "Build number is now... " + build

    return build
}

def incrementVersionNumber(def type = "minor") {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int

    if (type == 'major') {
        major++
        minor = 0
    } else if (type == 'minor') {
        minor++
    }

    version['major'] = major.toString()
    version['minor'] = minor.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }

    println "Version is now... " + major + "." + minor

    return major + "." + minor
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kapt { generateStubs = true }
    def rootProject = rootProject.ext
    compileSdkVersion rootProject.compileSdkV
    defaultConfig {

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
        applicationId rootProject.applicationId
        minSdkVersion rootProject.minSdkV
        targetSdkVersion rootProject.targetSdkV
        testInstrumentationRunner rootProject.testInstrumentationRunner
        vectorDrawables.useSupportLibrary = true
        versionName readVersionName()
        versionCode readBuildCode()
        multiDexEnabled true
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.github.com/\""
        }
        release {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.github.com/\""
            debuggable false
            jniDebuggable false
//            signingConfig signingConfigs.releaseConfig
            renderscriptDebuggable false
            zipAlignEnabled true
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildToolsVersion rootProject.buildToolsV
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinV"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinV"

    // support library
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitV"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitRx"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitRx"

    // gson
    implementation "com.google.code.gson:gson:$gsonV"

    // rx
    implementation "io.reactivex.rxjava2:rxjava:$rxV"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidV"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinV"

    // okHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpV"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpV"

    // timber
    implementation "com.jakewharton.timber:timber:$timberV"

    // stetho
    implementation "com.facebook.stetho:stetho:$stethoV"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoV"
    // anko
    implementation "org.jetbrains.anko:anko:$ankoV"
    implementation "org.jetbrains.anko:anko-commons:$ankoV"
    implementation "org.jetbrains.anko:anko-design:$ankoV"
    // image loader
    implementation "com.github.bumptech.glide:glide:$glideV"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "com.github.bumptech.glide:compiler:$glideV"

    // remember
    implementation 'com.tumblr:remember:1.0.0@aar'

    // Room dependencies

    implementation "androidx.room:room-runtime:$roomV"
    kapt "androidx.room:room-compiler:$roomV"


    // Live Data
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.2.0'

    //Eventbus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // mvp
    implementation "com.hannesdorfmann.mosby3:mvp:$mosbyV"

    //permission dispatcher
    implementation("com.github.hotchemi:permissionsdispatcher:${permissionDispatcherV}") {
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:${permissionDispatcherV}"

    //joda-time
    implementation 'net.danlew:android.joda:2.9.9.2'

    //firebase auth
    implementation "com.google.firebase:firebase-auth:$firebaseAuthV"
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingV"

    // crashlytics
    implementation 'com.google.firebase:firebase-analytics:17.6.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation platform('com.google.firebase:firebase-bom:25.12.0')


    // google play services gms
    implementation "com.google.android.gms:play-services-vision:$gmsVersion"

    // testing libraries
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.10"

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // dagger
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger:$daggerV"
    kapt "com.google.dagger:dagger-compiler:$daggerV"








}

task doMajorVersionIncrement {
    doLast {
        println "Incrementing major version..."
        incrementVersionNumber('major')
    }
}

task doMinorVersionIncrement {
    doLast {
        println "Incrementing minor version..."
        incrementVersionNumber('minor')
    }
}

task doBuildNumberIncrement {
    doLast {
        println "Incrementing build number..."
        incrementBuildNumber()

    }
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
apply plugin: 'com.google.gms.google-services'

